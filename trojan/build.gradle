buildscript {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    properties.keys().each { key -> project.ext.set(key, properties.getProperty(key))
    }
}
buildscript {
    repositories {
        maven {
            url "http://maven.dev.elenet.me/nexus/content/groups/public"
        }
    }
    dependencies {
        classpath 'me.ele:eradle:1.7.0'
    }
}

apply plugin: 'eradle'
apply plugin: 'com.android.library'

def trojan_version_code = 304
def trojan_version = "3.0.4-SNAPSHOT"

android {

    //TODO 这是为了debug C++而加的，后面要去掉
    //publishNonDefault true

    compileSdkVersion 23
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode trojan_version_code
        versionName "$trojan_version"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    provided 'com.android.support:recyclerview-v7:23.4.0'
    provided 'com.android.support:appcompat-v7:23.4.0'

    provided "com.squareup.retrofit2:converter-gson:2.0.1"
    provided "me.ele:lancet-base:1.0.2"
}

def outputPath = project.rootProject.buildDir.parentFile.getPath() + "/archives/${trojan_version}"
def module_name = "trojan"

task copyOutputs {
    doLast {
        copy {
            from project.rootProject.buildDir.parentFile.getPath() + "/${module_name}/build/outputs"
            into outputPath
        }
    }
}



modifyPom {
    project {
        groupId 'me.ele'
        artifactId 'trojan'
        version "${trojan_version}"
        packaging 'aar'
        description = 'Android日志收集库'
    }
}

extraArchive {
    sources = false
}
